package com.sam.LogicGates;

import java.awt.EventQueue;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.UIManager;
import javax.swing.border.Border;
import javax.swing.border.EmptyBorder;
import java.awt.Color;
import java.awt.Font;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.event.ItemListener;
import java.awt.event.ItemEvent;

public class Main extends JFrame {

	private static final long serialVersionUID = 1L;
	private JPanel contentPane;
	private JTextArea textOutput;
	public JLabel lblB = new JLabel("B");
	public int a, b;
	public boolean aa;
	public boolean bb;
	public String output;

	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Main frame = new Main();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	@SuppressWarnings({ "rawtypes", "unchecked" })
	public Main() {
		setType(Type.UTILITY);
		setFont(new Font("Arial", Font.BOLD, 12));
		setForeground(Color.BLACK);
		setTitle("Logic Gates");
		try {
			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
		} catch (Exception e) {
			e.printStackTrace();
		}
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setSize(250, 365);
		setLocationRelativeTo(null);
		contentPane = new JPanel();
		contentPane.setBackground(Color.DARK_GRAY);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JTextField textInputA = new JTextField() {
			private static final long serialVersionUID = 1L;

		@Override public void setBorder(Border border) {
								// No border.
		}
	};
		textInputA.setForeground(Color.BLACK);
		textInputA.setFont(new Font("Arial", Font.BOLD, 11));
		textInputA.setBackground(Color.GRAY);
		textInputA.setHorizontalAlignment(SwingConstants.CENTER);
		textInputA.setBounds(74, 36, 86, 20);
		contentPane.add(textInputA);
		textInputA.setColumns(10);
		
		JTextField textInputB = new JTextField() {
			private static final long serialVersionUID = 1L;

		@Override public void setBorder(Border border) {
							// No Border.
			}
		};
		textInputB.setFont(new Font("Arial", Font.BOLD, 11));
		textInputB.setBackground(Color.GRAY);
		textInputB.setHorizontalAlignment(SwingConstants.CENTER);
		textInputB.setBounds(74, 92, 86, 20);
		contentPane.add(textInputB);
		textInputB.setColumns(10);
		
		JLabel lblA = new JLabel("A");
		lblA.setForeground(Color.GREEN);
		lblA.setFont(new Font("Arial", Font.BOLD, 11));
		lblA.setHorizontalAlignment(SwingConstants.CENTER);
		lblA.setBounds(94, 11, 46, 14);
		contentPane.add(lblA);
		
		
		JLabel lblB = new JLabel("B");
		lblB.setHorizontalAlignment(SwingConstants.CENTER);
		lblB.setForeground(Color.GREEN);
		lblB.setFont(new Font("Arial", Font.BOLD, 11));
		lblB.setBounds(94, 67, 46, 14);
		contentPane.add(lblB);
		
		JComboBox comboBoxGateSelect = new JComboBox();
		comboBoxGateSelect.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent arg0) {
				String NOT = new String("NOT");
				String AND = new String("AND");
				String OR = new String("OR");
				String gate = String.valueOf(comboBoxGateSelect.getSelectedItem());
				if (gate.equals(NOT)) {
					textInputB.setEditable(false);
					textInputB.setBackground(Color.DARK_GRAY);
					textInputB.setForeground(Color.DARK_GRAY);
					textInputB.setText("0");
					lblB.setForeground(Color.DARK_GRAY);
					lblA.setBounds(94, 67, 46, 14);
					lblB.setBounds(94, 11, 46, 14);
					textInputA.setBounds(74, 92, 86, 20);
					textInputB.setBounds(74, 36, 86, 20);
					}
				if (gate.equals(AND)) {
					textInputB.setForeground(Color.BLACK);
					textInputB.setText("");
					textInputB.setBackground(Color.GRAY);
					textInputB.setEditable(true);
					lblB.setForeground(Color.GREEN);
					lblA.setBounds(94, 11, 46, 14);
					lblB.setBounds(94, 67, 46, 14);
					textInputA.setBounds(74, 36, 86, 20);
					textInputB.setBounds(74, 92, 86, 20);
				}
				if (gate.equals(OR)) {
					textInputB.setForeground(Color.BLACK);
					textInputB.setText("");
					textInputB.setBackground(Color.GRAY);
					textInputB.setEditable(true);
					lblB.setForeground(Color.GREEN);
					lblA.setBounds(94, 11, 46, 14);
					lblB.setBounds(94, 67, 46, 14);
					textInputA.setBounds(74, 36, 86, 20);
					textInputB.setBounds(74, 92, 86, 20);
				}
			}
		});
		comboBoxGateSelect.setFont(new Font("Arial", Font.BOLD, 11));
		comboBoxGateSelect.setBackground(Color.GRAY);
		comboBoxGateSelect.setModel(new DefaultComboBoxModel(new String[] {"AND", "OR", "NOT"}));
		comboBoxGateSelect.setBounds(74, 148, 86, 20);
		contentPane.add(comboBoxGateSelect);
				
		JButton btnCalculate = new JButton("Calculate");
		btnCalculate.addActionListener(new ActionListener() {
			JFrame error = new JFrame();
			public void actionPerformed(ActionEvent arg0) {
			 try {
				int a = Integer.parseInt(textInputA.getText());
				int b = Integer.parseInt(textInputB.getText());
				String bs = Integer.toString(b);
				String gate = String.valueOf(comboBoxGateSelect.getSelectedItem());
				if(a == 1) {
					aa = true;
					System.out.println("a is " + aa + "(1)");
				}
				if(a == 0) {
					aa = false;
					System.out.println("a is " + aa + "(0)");
				}
				if(b == 1) {
					bb = true;
					System.out.println("b is " + bb + "(1)");
				}
				if(b == 0) {
					bb = false;
					System.out.println("b is " + bb + "(0)");
				}
				if(a > 1 || a < 0) {
					textOutput.setText("");
					JOptionPane.showMessageDialog(error, "Input A must be either 1 or 0. \r\n True = 1, False = 0.", "Error", JOptionPane.ERROR_MESSAGE, null);
					return;
				}
				if(b > 1 || b < 0) {
					textOutput.setText("");
					JOptionPane.showMessageDialog(error, "Input B must be either 1 or 0. \r\n True = 1, False = 0.", "Error", JOptionPane.ERROR_MESSAGE, null);
					return;
				}
				if ((a == 1) || (a == 0) && (bs.equals(null))) {
					aa = true;
					System.out.println("NOT");
				}
				System.out.println(a + " " + b + " " + gate);
				System.out.println(aa + " " + bb + " " + gate);
				textOutput.setText("");
				calculate(aa, bb, gate);
			 } catch(NumberFormatException e) {
				 textOutput.setText("");
				 JOptionPane.showMessageDialog(error, "Inputs A and B must be either 1 or 0. \r\n True = 1, False = 0.", "Error", JOptionPane.ERROR_MESSAGE, null);
				 return;
			 }		
				
			}
		});
		btnCalculate.setBackground(Color.GRAY);
		btnCalculate.setFont(new Font("Arial", Font.BOLD, 11));
		btnCalculate.setForeground(Color.BLACK);
		btnCalculate.setBounds(72, 204, 89, 23);
		contentPane.add(btnCalculate);
		
		textOutput = new JTextArea();
		textOutput.setEditable(false);
		textOutput.setFont(new Font("Arial", Font.BOLD, 13));
		textOutput.setBackground(Color.GRAY);
		textOutput.setBounds(74, 263, 86, 22);
		contentPane.add(textOutput);
		
		JLabel lblGate = new JLabel("Gate");
		lblGate.setHorizontalAlignment(SwingConstants.CENTER);
		lblGate.setForeground(Color.GREEN);
		lblGate.setFont(new Font("Arial", Font.BOLD, 11));
		lblGate.setBounds(94, 123, 46, 14);
		contentPane.add(lblGate);
		
		JLabel lblResult = new JLabel("Result");
		lblResult.setForeground(Color.GREEN);
		lblResult.setFont(new Font("Arial", Font.BOLD, 11));
		lblResult.setBounds(94, 238, 46, 14);
		contentPane.add(lblResult);
	}
	
	private void calculate(Boolean aa, Boolean bb, String gate) {
		System.out.println("Calculate: " + aa + " " + bb);
		String AND = new String("AND");
		String OR = new String("OR");
		String NOT = new String("NOT");
		if (gate.equals(AND)) {
			AND(aa, bb);
		}
		if (gate.equals(OR)) {
			OR(aa, bb);
		}
		if (gate.equals(NOT)) {
			NOT(aa);
		}
	}
	
	private void AND(Boolean aa, Boolean bb) {
		if((aa == true) && (bb == true)) {
			output = new String("1");
			output(output);
		}	
		if((aa == false) && (bb == true)) {
			output = new String("0");
			output(output);
		}
		if((aa == true) && (bb == false)) {
			output = new String("0");
			output(output);
		}
		if((aa == false) && (bb == false)) {
			output = new String("0");
			output(output);
		}
		if((aa != (true || false)) || (bb != (true || false))) {
			output = new String("");
			output(output);
		}
	}
	
	private void OR(Boolean aa, Boolean bb) {
		if((aa == true) || (bb == true)) {
			output = new String("1");
			output(output);
		}
		if((aa == false) && (bb == false)) {
			output = new String("0");
			output(output);	
		}
		if((aa != (true || false)) || (bb != (true || false))) {
			output = new String("");
			output(output);
		}
	}
	
	private void NOT(Boolean aa) {
		if((aa == true)) {
			output = new String("0");
			output(output);
		}
		if((aa == false)) {
			output = new String("1");
			output(output);
		}
	}
		public void output(String output) {
		textOutput.append("         " + output);
	}
}
